name: OCV PR:5.x ARM64 debug

on:
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/OCV-PR-5.x-ARM64-Debug.yaml'
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  EXTRA_CMAKE_OPTIONS: '-DCV_DISABLE_OPTIMIZATION=ON -DCMAKE_BUILD_TYPE=Debug -DOPENCV_DOWNLOAD_PATH=/home/ci/binaries_cache -DBUILD_EXAMPLES=ON -DOPENCV_ENABLE_NONFREE=ON -DWITH_OPENCL=OFF'
  PR_AUTHOR: ${{ github.event.pull_request.user.login }}
  PR_AUTHOR_FORK: ${{ github.event.pull_request.head.repo.full_name }}
  SOURCE_BRANCH_NAME: ${{ github.head_ref }}
  TARGET_BRANCH_NAME: ${{ github.base_ref }}
  ANT_HOME: '/usr/share/ant'
  GIT_CACHE_DOCKER: '/home/ci/git_cache'
  PYTHONPATH: /home/ci/build/python_loader:$PYTHONPATH
  OPENCV_TEST_DATA_PATH: '/home/ci/opencv_extra/testdata'
  OPENCV_DOCKER_WORKDIR: '/home/ci/opencv'
  PARALLEL_JOBS: 16

jobs:
  BuildAndTest:
    runs-on: opencv-cn-lin-arm64
    defaults:
      run:
        shell: bash
    container:
      image: quay.io/opencv-ci/opencv-ubuntu-20.04-arm64:20230413
      volumes:
        - /home/opencv-cn/git_cache:/home/ci/git_cache
        - /home/opencv-cn/ci_cache/opencv:/home/ci/.ccache
        - /home/opencv-cn/binaries_cache:/home/ci/binaries_cache
        - /home/opencv-cn/dnn-models:/home/ci/dnn-models
    steps:
    - name: Brief system information
      timeout-minutes: 60
      run: bash ${{ env.GIT_CACHE_DOCKER }}/print_system_information.sh
    - name: Define proper HOME path
      timeout-minutes: 60
      run: echo "HOME=/home/ci" >> $GITHUB_ENV
    - name: Setup infra environment
      timeout-minutes: 60
      if: ${{ github.event.repository.name == 'ci-gha-workflow' }}
      run: |
        echo "TARGET_BRANCH_NAME=5.x" >> $GITHUB_ENV
    - name: Setup test environment
      if: ${{ github.event.repository.name != 'ci-gha-workflow' }}
      run: |
        echo "EXTRA_GTEST_OPTIONS=--skip_unstable=1" >> $GITHUB_ENV
    - name: PR info
      timeout-minutes: 60
      run: |
        echo "PR Author: ${{ env.PR_AUTHOR }}"
        echo "PR Author fork: ${{ env.PR_AUTHOR_FORK }}"
        echo "Source branch name: ${{ env.SOURCE_BRANCH_NAME }}"
        echo "Target branch name: ${{ env.TARGET_BRANCH_NAME }}"
    - name: Clean
      timeout-minutes: 60
      run: find ${{ env.OPENCV_DOCKER_WORKDIR }} -mindepth 1 -delete
    - name: Fetch opencv
      timeout-minutes: 60
      run: git clone --branch ${{ env.TARGET_BRANCH_NAME }} --reference ${{ env.GIT_CACHE_DOCKER }}/opencv.git https://github.com/opencv/opencv.git ${{ env.OPENCV_DOCKER_WORKDIR }}
    - name: Merge opencv with ${{ env.SOURCE_BRANCH_NAME }} branch
      timeout-minutes: 60
      if: ${{ github.event.repository.name != 'ci-gha-workflow' }}
      run: |
        cd ${{ env.OPENCV_DOCKER_WORKDIR }}
        git pull -v "https://github.com/${{ env.PR_AUTHOR_FORK }}" "${{ env.SOURCE_BRANCH_NAME }}"
    - name: Clone opencv_extra
      timeout-minutes: 60
      run: git clone --single-branch --branch ${{ env.TARGET_BRANCH_NAME }} --reference ${{ env.GIT_CACHE_DOCKER }}/opencv_extra.git https://github.com/opencv/opencv_extra.git $HOME/opencv_extra
    - name: Merge opencv_extra with ${{ env.SOURCE_BRANCH_NAME }} branch
      timeout-minutes: 60
      if: ${{ github.event.repository.name != 'ci-gha-workflow' }}
      run: |
        OPENCV_EXTRA_FORK=$(git ls-remote --heads "https://github.com/${{ env.PR_AUTHOR }}/opencv_extra" "${{ env.SOURCE_BRANCH_NAME }}") || true
        if [[ ! -z "$OPENCV_EXTRA_FORK" ]]; then
          echo "Merge opencv_extra with ${{ env.SOURCE_BRANCH_NAME }} branch"
          cd $HOME/opencv_extra
          git pull -v "https://github.com/${{ env.PR_AUTHOR }}/opencv_extra" "${{ env.SOURCE_BRANCH_NAME }}"
        else
          echo "No merge since ${{ env.PR_AUTHOR }}/opencv_extra does not have branch ${{ env.SOURCE_BRANCH_NAME }}"
        fi
    # download models independently from DNN as some modules are used here and there on other places
    #- name: Extra DNN models update
      #timeout-minutes: 60
      #run: |
        #DOWNLOAD_MODELS_FILE='download_models.py'
        #if [ -f ${{ env.DNN_MODELS }}/dnn/latest-hash-${{ env.TARGET_BRANCH_NAME }}.txt ]; then
          #LATEST_SAVED_HASH=$(cat ${{ env.DNN_MODELS }}/dnn/latest-hash-${{ env.TARGET_BRANCH_NAME }}.txt)
        #else
          #LATEST_SAVED_HASH=""
        #fi
        #LATEST_HASH=$(sha256sum $HOME/opencv_extra/testdata/dnn/$DOWNLOAD_MODELS_FILE | awk '{print $1}')
        #if [[ $LATEST_HASH == $LATEST_SAVED_HASH ]]; then
          #echo "DNN models are up to date"
          #echo "OPENCV_DNN_TEST_DATA_PATH=${{ env.DNN_MODELS }}" >> $GITHUB_ENV
        #else
          #echo "Updating DNN models list"
          #echo "OPENCV_DNN_TEST_DATA_PATH=/home/ci/new-dnn-models" >> $GITHUB_ENV && OPENCV_DNN_TEST_DATA_PATH='/home/ci/new-dnn-models'
          #mkdir -p "$OPENCV_DNN_TEST_DATA_PATH"
          #rsync -a --exclude=$DOWNLOAD_MODELS_FILE ${{ env.DNN_MODELS }}/* $OPENCV_DNN_TEST_DATA_PATH
          #cp $HOME/opencv_extra/testdata/dnn/download_models.py $OPENCV_DNN_TEST_DATA_PATH/dnn
          #cd $OPENCV_DNN_TEST_DATA_PATH/dnn && python3 download_models.py
        #fi
    - name: Configure OpenCV
      timeout-minutes: 60
      run: |
        cmake -G Ninja -B $HOME/build ${{ env.EXTRA_CMAKE_OPTIONS }} ${{ env.OPENCV_DOCKER_WORKDIR }}
    - name: Build OpenCV
      timeout-minutes: 60
      id: build-opencv
      run: |
        cd $HOME/build
        ninja -j ${{ env.PARALLEL_JOBS }} | tee $HOME/build/build-log.txt
    - name: Warnings check
      timeout-minutes: 60
      run: cd $HOME/build && python3 $HOME/scripts/warnings-handling.py
    - name: Accuracy:3d
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_3d --test_threads=$PARALLEL_JOBS ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Accuracy:calib
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_calib --test_threads=$PARALLEL_JOBS ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Accuracy:core
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_core --test_threads=$PARALLEL_JOBS ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Accuracy:dnn
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_dnn --test_threads=$PARALLEL_JOBS ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Accuracy:features
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_features --test_threads=$PARALLEL_JOBS ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Accuracy:flann
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_flann --test_threads=$PARALLEL_JOBS ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Accuracy:highgui
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_highgui --test_threads=$PARALLEL_JOBS ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Accuracy:imgcodecs
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_imgcodecs --test_threads=$PARALLEL_JOBS ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Accuracy:imgproc
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_imgproc --test_threads=$PARALLEL_JOBS ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Accuracy:objdetect
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_objdetect --test_threads=$PARALLEL_JOBS ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Accuracy:photo
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_photo --test_threads=$PARALLEL_JOBS ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Accuracy:stereo
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_stereo --test_threads=$PARALLEL_JOBS ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Accuracy:stitching
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_stitching --test_threads=$PARALLEL_JOBS ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Accuracy:video
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_video --test_threads=$PARALLEL_JOBS ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Accuracy:videoio
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a bin/opencv_test_videoio --test_threads=$PARALLEL_JOBS --gtest_filter="-:Media.audio/0" ${{ env.EXTRA_GTEST_OPTIONS }}
    - name: Python3
      timeout-minutes: 60
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: |
        cd $HOME/build
        python3 $HOME/opencv/modules/python/test/test.py --repo $HOME/opencv -v
    - name: Java
      timeout-minutes: 60
      id: java-test
      if: ${{ always() && steps.build-opencv.outcome == 'success' }}
      run: cd $HOME/build && xvfb-run -a python3 ${{ env.OPENCV_DOCKER_WORKDIR }}/modules/ts/misc/run.py . -a -t java
    - name: Save Unit Test Results
      timeout-minutes: 60
      uses: actions/upload-artifact@v4
      if: ${{ always() && steps.java-test.outcome == 'success' && steps.build-opencv.outcome == 'success' }}
      with:
        name: junit-html-ubuntu20-arm64-debug
        path: /home/ci/build/java_test/testResults/junit-noframes.html

  BuildContrib:
    runs-on: opencv-cn-lin-arm64
    defaults:
      run:
        shell: bash
    container:
      image: quay.io/opencv-ci/opencv-ubuntu-20.04-arm64:20230413
      volumes:
        - /home/opencv-cn/git_cache:/home/ci/git_cache
        - /home/opencv-cn/ci_cache/opencv:/home/ci/.ccache
        - /home/opencv-cn/binaries_cache:/home/ci/binaries_cache
    steps:
    - name: Brief system information
      timeout-minutes: 60
      run: bash ${{ env.GIT_CACHE_DOCKER }}/print_system_information.sh
    - name: Define proper HOME path
      timeout-minutes: 60
      run: echo "HOME=/home/ci" >> $GITHUB_ENV
    - name: Setup infra environment
      timeout-minutes: 60
      if: ${{ github.event.repository.name == 'ci-gha-workflow' }}
      run: echo "TARGET_BRANCH_NAME=5.x" >> $GITHUB_ENV
    - name: PR info
      timeout-minutes: 60
      run: |
        echo "PR Author: ${{ env.PR_AUTHOR }}"
        echo "PR Author fork: ${{ env.PR_AUTHOR_FORK }}"
        echo "Source branch name: ${{ env.SOURCE_BRANCH_NAME }}"
        echo "Target branch name: ${{ env.TARGET_BRANCH_NAME }}"
    - name: Clean
      timeout-minutes: 60
      run: find ${{ env.OPENCV_DOCKER_WORKDIR }} -mindepth 1 -delete
    - name: Fetch opencv
      timeout-minutes: 60
      run: git clone --branch ${{ env.TARGET_BRANCH_NAME }} --reference ${{ env.GIT_CACHE_DOCKER }}/opencv.git https://github.com/opencv/opencv.git ${{ env.OPENCV_DOCKER_WORKDIR }}
    - name: Merge opencv with a test branch
      timeout-minutes: 60
      if: ${{ github.event.repository.name != 'ci-gha-workflow' }}
      run: |
        cd ${{ env.OPENCV_DOCKER_WORKDIR }}
        git pull -v "https://github.com/${{ env.PR_AUTHOR_FORK }}" "${{ env.SOURCE_BRANCH_NAME }}"
    - name: Clone opencv_contrib
      timeout-minutes: 60
      run: git clone --single-branch --branch ${{ env.TARGET_BRANCH_NAME }} --reference ${{ env.GIT_CACHE_DOCKER }}/opencv_contrib.git https://github.com/opencv/opencv_contrib.git $HOME/opencv_contrib
    - name: Merge opencv_contrib with ${{ env.SOURCE_BRANCH_NAME }} branch
      timeout-minutes: 60
      if: ${{ github.event.repository.name != 'ci-gha-workflow' }}
      run: |
        OPENCV_CONTRIB_FORK=$(git ls-remote --heads "https://github.com/${{ env.PR_AUTHOR }}/opencv_contrib" "${{ env.SOURCE_BRANCH_NAME }}") || true
        if [[ ! -z "$OPENCV_CONTRIB_FORK" ]]; then
          echo "Merge opencv_contrib with ${{ env.SOURCE_BRANCH_NAME }} branch"
          cd $HOME/opencv_contrib
          git pull -v "https://github.com/${{ env.PR_AUTHOR }}/opencv_contrib" "${{ env.SOURCE_BRANCH_NAME }}"
        else
          echo "No merge since ${{ env.PR_AUTHOR }}/opencv_contrib does not have branch ${{ env.SOURCE_BRANCH_NAME }}"
        fi
    - name: Configure OpenCV Contrib
      timeout-minutes: 60
      run: |
        cmake -G Ninja -B $HOME/build ${{ env.EXTRA_CMAKE_OPTIONS }} -DOPENCV_EXTRA_MODULES_PATH=$HOME/opencv_contrib/modules ${{ env.OPENCV_DOCKER_WORKDIR }}
    - name: Build OpenCV Contrib
      timeout-minutes: 60
      run: |
        cd $HOME/build
        ninja -j ${{ env.PARALLEL_JOBS }} | tee $HOME/build/build-log.txt
    - name: Warnings check
      timeout-minutes: 60
      run: cd $HOME/build && python3 $HOME/scripts/warnings-handling.py
